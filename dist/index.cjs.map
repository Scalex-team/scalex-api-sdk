{"version":3,"sources":["../src/index.ts","../src/functions/call-api.function.ts","../src/functions/send-api-response.ts","../src/types/generic/endpoints.interface.ts","../src/types/generic/api-response.type.ts","../src/types/customers/endpoint-payloads/create-account.payloads.ts","../src/types/customers/endpoint-payloads/account-recovery.payloads.ts","../src/types/customers/endpoint-payloads/login.payloads.ts","../src/sdks/internal/modules/customers.sdk.ts","../src/sdks/internal/internal.sdk.ts"],"sourcesContent":["export * from './sdks';\nexport * from './types';","import axios, { AxiosResponse, Method } from 'axios';\nimport { ApiResponse, Endpoint, ScalexError } from '../types';\nimport { notifyClientOfSuccess, notifyClientOfFailure } from './send-api-response';\nexport const ScalexAuthHeaderName = 'scalexadminauthorization';\nexport const ScalexAuthBearerName = 'ScalexAdminBearer';\n\nexport async function makeHttpRequest ( \n\t{\n\t\tmethod, url, body, headers, query, params\n\t}: \n\t{\n\t\tmethod: Method,\n\t\turl: string,\n\t\tbody?: unknown,\n\t\theaders?: any,\n\t\tparams?: Array<string>,\n\t\tquery?: any\n\t} ): Promise<AxiosResponse> {\n\tconst aggregatedHeaders: any = {\n\t\t'Content-Type': 'application/json',\n\t\t'Access-Control-Allow-Credentials': true,\n\t\t'Access-Control-Allow-Headers': 'content-type',\n\t\t'Access-Control-Allow-Methods': 'GET,HEAD,PUT,POST,DELETE,PATCH',\n\t};\n\tif ( headers ) {\n\t\tif ( headers[ScalexAuthHeaderName] ) {\n\t\t\taggregatedHeaders[ScalexAuthHeaderName] = headers[ScalexAuthHeaderName];\n\t\t}\n\t}\n\n\tif ( params ) {\n\t\tparams.forEach( p => {\n\t\t\turl += `/${p}`;\n\t\t} );\n\t}\n\treturn axios( {\n\t\tmethod,\n\t\turl,\n\t\tdata: body,\n\t\theaders: aggregatedHeaders,\n\t\tparams: query\n\t} );\n}\n\nexport async function callApi<Input, Output>( requestParams: {\n\tserviceUri: string,\n\tendpoint: Endpoint,\n    headers?: unknown,\n    body?: Input,\n\tparams?: Array<string>,\n    query?: unknown,\n} ): Promise<ApiResponse<Output>> {\n\ttry {\n\t\tconst response = await makeHttpRequest( {\n\t\t\tmethod: requestParams.endpoint.method,\n\t\t\tbody: requestParams.body,\n\t\t\tquery: requestParams.query,\n\t\t\theaders: requestParams.headers,\n\t\t\tparams: requestParams.params,\n\t\t\turl: `${requestParams.serviceUri}${requestParams.endpoint.fullPath}`\n\t\t} );\n\t\treturn notifyClientOfSuccess<Output>( response.data );\n\t} catch ( e: unknown ) {\n\t\tthrow notifyClientOfFailure( {\n\t\t\terror: e as ScalexError,\n\t\t} );\n\t}\n}\n\nexport function setBearerToken(token: string) {\n\treturn {\n\t\tauthorization: `Bearer ${token}`\n\t}\n}","import { AxiosError, HttpStatusCode } from 'axios';\nimport { ApiResponse, ScalexError } from '../types';\n\nexport interface ScalexSuccessResponse<T> {\n\tstatusCode?: HttpStatusCode;\n\tmessage?: string;\n\tdata?: T;\n}\n\nexport function notifyClientOfSuccess<T>(\n\tpayload: ScalexSuccessResponse<T> = {\n\t\tstatusCode: HttpStatusCode.Ok,\n\t\tmessage: 'Your request was successful',\n\t\tdata: {} as never,\n\t}\n): ApiResponse<T> {\n\treturn {\n\t\tstatusCode: payload.statusCode ?? HttpStatusCode.Ok,\n\t\tmessage: payload.message as string ?? 'Your request was successful',\n\t\tdata: payload.data as T,\n\t};\n}\n\nexport function notifyClientOfFailure<T>(\n\t{\n\t\tdata = {} as never,\n\t\terror,\n\t}: {\n\t\tdata?: T;\n\t\terror: ScalexError | AxiosError\n\t}\n): ApiResponse<T> {\n\tif ( error instanceof AxiosError ) {\n\t\tconst scxError = error.response?.data as ScalexError;\n\t\treturn {\n\t\t\tstatusCode: scxError?.statusCode ?? 500,\n\t\t\tdata,\n\t\t\tmessage: scxError?.message ?? 'Something went terribly wrong. Please contact support',\n\t\t\terror: scxError\n\t\t};\n\t} \n\treturn {\n\t\tstatusCode: error?.statusCode ?? 500,\n\t\tdata,\n\t\tmessage: error?.message ?? 'Something went terribly wrong. Please contact support',\n\t\terror,\n\t};\n\n}","export enum HttpMethods {\n\tPost = 'POST',\n\tPut = 'PUT',\n\tGet = 'GET',\n\tPatch = 'PATCH',\n\tDelete = 'DELETE'\n}\n\nexport interface Endpoint {\n\tpath: string;\n\tmethod: HttpMethods;\n\tfullPath: string;\n}\n\nexport type Endpoints<T extends Array<string>> = {\n\t[k in keyof T]: Endpoint;\n}","import { HttpStatusCode } from \"axios\";\nimport { ScalexError } from \"./errors.interface\";\nimport { IUser } from \"./data-models/user/user.interfaces\";\n\nexport type ValuesOf<T extends any[]> = T[number];\nexport interface ApiResponse<T> {\n\tstatusCode: HttpStatusCode;\n\terror?: ScalexError;\n\tmessage: string;\n\tdata: T\n}\n\nexport enum TokenActions {\n\tLogin = 'login',\n\tDataAccess = 'data-access',\n\tSetPassword = 'set-password',\n\tRefresh='refresh',\n\tResetPassword='reset-password'\n}\n\nexport const TokenExpiry: {\n\t[key in TokenActions]: string\n} = {\n\t'set-password': '15m',\n\t'data-access': '3h',\n\trefresh: '1d',\n\t'reset-password': '15m',\n\t'login': '10m'\n};\n\nexport type DecodedJwtToken = { admin?: Partial<IUser>, action?: TokenActions }\nexport type ScalexAuthenticatedRequest = Request & DecodedJwtToken","import { Endpoint, HttpMethods } from \"../../generic\";\n\nexport interface IRequestOtpToRegisterPayload {\n    email: string\n}\n\nexport interface IRequestOtpToRegisterResponse {\n    token: string;\n}\n\nexport const RequestOtpToRegisterEndpoint: Endpoint = {\n    method: HttpMethods.Post,\n    path: 'otps',\n    fullPath: 'customers-auth/otps'\n}\n\nexport interface IVerifyOtpAndCreatePasswordPayload {\n    otp: string;\n    password: string;\n    agreedToTerms: boolean;\n}\n\nexport interface IVerifyOtpAndCreatePasswordResponse {\n    token: string;\n}\n\nexport const VerifyOtpAndCreatePasswordEndpoint: Endpoint = {\n    method: HttpMethods.Post,\n    path: 'passwords',\n    fullPath: 'customers-auth/passwords'\n}\n\nexport interface IInitiate2faResponse {\n    qr: string;\n    secret: string;\n}\n\nexport const Initiate2faEndpoint: Endpoint = {\n    method: HttpMethods.Post,\n    path: '2fa',\n    fullPath: 'customers-auth/2fa'\n}\n\nexport interface IVerify2faTokenPayload {\n    token: string;\n}\n\nexport const Verify2faEndpoint: Endpoint = {\n    method: HttpMethods.Patch,\n    path: '2fa',\n    fullPath: 'customers-auth/2fa'\n}\n\n","import { Endpoint, HttpMethods } from \"../../generic\";\n\nexport interface IRequestPasswordResetPayload {\n    email: string\n}\n\nexport interface IRequestPasswordResetResponse {\n    token: string;\n}\n\nexport const RequestPasswordResetEndpoint: Endpoint = {\n    method: HttpMethods.Post,\n    path: '',\n    fullPath: 'customers-account-recovery'\n}\n\nexport interface IResetPasswordPayload {\n    otp: string;\n    password: string;\n    confirmPassword: string;\n}\n\nexport const ResetPasswordEndpoint: Endpoint = {\n    method: HttpMethods.Patch,\n    path: '',\n    fullPath: 'customers-account-recovery'\n}\n","import { Endpoint, HttpMethods } from \"../../generic\";\n\nexport interface IReqeustOtpForLoginPayload {\n    email: string;\n}\n\nexport interface IVerifyOtpAndPasswordForLoginPayload {\n    otp: string;\n    password: string;\n}\n\nexport interface ILoginResponse {\n    token: string;\n}\n\nexport const RequestOtpForLoginEndpoint: Endpoint = {\n    method: HttpMethods.Post,\n    path: 'login',\n    fullPath: 'customers-auth/login'\n}\n\nexport const VerifyOtpAndPasswordForLoginEndpoint: Endpoint = {\n    method: HttpMethods.Patch,\n    path: 'login',\n    fullPath: 'customers-auth/login'\n}\n\nexport const Verify2faForLoginEndpoint: Endpoint = {\n    method: HttpMethods.Patch,\n    path: 'login/2fa',\n    fullPath: 'customers-auth/login/2fa'\n}","import { ScalexSuccessResponse, callApi, setBearerToken } from \"../../../functions\";\nimport {\n    IInitiate2faResponse,\n    IRequestOtpToRegisterPayload,\n    IRequestOtpToRegisterResponse,\n    IRequestPasswordResetPayload,\n    IRequestPasswordResetResponse,\n    IResetPasswordPayload,\n    IVerify2faTokenPayload,\n    IVerifyOtpAndCreatePasswordPayload,\n    IVerifyOtpAndCreatePasswordResponse,\n    Initiate2faEndpoint,\n    RequestOtpToRegisterEndpoint,\n    RequestPasswordResetEndpoint,\n    ResetPasswordEndpoint,\n    Verify2faEndpoint,\n    VerifyOtpAndCreatePasswordEndpoint\n} from \"../../../types\";\n\nexport class ScalexCustomersSdk {\n    constructor( protected apiUrl: string ) {}\n\n    async requestOtpToRegister(payload: IRequestOtpToRegisterPayload)\n    : Promise<ScalexSuccessResponse<IRequestOtpToRegisterResponse>> {\n        return callApi<IRequestOtpToRegisterPayload, IRequestOtpToRegisterResponse>({\n            serviceUri: this.apiUrl,\n            endpoint: RequestOtpToRegisterEndpoint,\n            body: payload\n        })\n    }\n\n    async verifyOtpAndCreatePassword( payload: IVerifyOtpAndCreatePasswordPayload, authToken: string )\n    : Promise<ScalexSuccessResponse<IVerifyOtpAndCreatePasswordResponse>> {\n        return callApi<IVerifyOtpAndCreatePasswordPayload, IVerifyOtpAndCreatePasswordResponse>({\n            serviceUri: this.apiUrl,\n            endpoint: VerifyOtpAndCreatePasswordEndpoint,\n            body: payload,\n            headers: {\n                ...setBearerToken(authToken)\n            }\n        })\n    }\n\n    async initiate2faRegistration( authToken: string )\n    : Promise<ScalexSuccessResponse<IInitiate2faResponse>> {\n        return callApi<null, IInitiate2faResponse>({\n            serviceUri: this.apiUrl,\n            endpoint: Initiate2faEndpoint,\n            headers: {\n                ...setBearerToken(authToken)\n            }\n        })\n    }\n\n    async verify2faToken( payload: IVerify2faTokenPayload, authToken: string )\n    : Promise<ScalexSuccessResponse<null>> {\n        return callApi<IVerify2faTokenPayload, null>({\n            serviceUri: this.apiUrl,\n            endpoint: Verify2faEndpoint,\n            body: payload,\n            headers: {\n                ...setBearerToken(authToken)\n            }\n        })\n    }\n\n    async requestPasswordReset( payload: IRequestPasswordResetPayload )\n    : Promise<ScalexSuccessResponse<IRequestPasswordResetResponse>> {\n        return callApi<IRequestPasswordResetPayload, IRequestPasswordResetResponse>({\n            serviceUri: this.apiUrl,\n            endpoint: RequestPasswordResetEndpoint,\n            body: payload\n        })\n    }\n\n    async resetPassword( payload: IResetPasswordPayload, authToken: string )\n    : Promise<ScalexSuccessResponse<null>> {\n        return callApi<IResetPasswordPayload, null>({\n            serviceUri: this.apiUrl,\n            endpoint: ResetPasswordEndpoint,\n            body: payload,\n            headers: {\n                ...setBearerToken(authToken)\n            }\n        })\n    }\n}","import {ScalexCustomersSdk} from \"./modules\";\n\nexport enum ScalexInternalEnvironments {\n    local = 'local',\n    dev = 'dev',\n    prod = 'prod'\n};\n\nexport enum ScalexInternalApiVersions {\n    v1 = '/v1',\n}\n\nconst InternalEnvironmentUrls: {\n    [key in ScalexInternalEnvironments]: string;\n} = {\n    local: 'http://localhost:8500',\n    dev: 'https://scalex-api-gateway-dev.up.railway.app',\n    prod: 'https://scalex-api.up.railway.app'\n}\n\nexport class ScalexInternalAPI {\n    private apiUrl: string;\n    customers: ScalexCustomersSdk;\n\n\n    constructor(\n        environment: ScalexInternalEnvironments = ScalexInternalEnvironments.dev,\n        version: ScalexInternalApiVersions = ScalexInternalApiVersions.v1\n    ) {\n        this.apiUrl = InternalEnvironmentUrls[environment] + version;\n        this.customers = new ScalexCustomersSdk(this.apiUrl)\n    }\n}"],"mappings":"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","names":["import_axios","axios","HttpMethods","TokenActions","ScalexInternalEnvironments","ScalexInternalApiVersions"]}