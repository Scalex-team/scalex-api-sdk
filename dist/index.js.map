{"version":3,"sources":["../src/functions/call-api.function.ts","../src/functions/send-api-response.ts","../src/types/generic/endpoints.interface.ts","../src/types/generic/api-response.type.ts","../src/types/generic/data-models/user/user.interface.ts","../src/types/generic/data-models/user/country.interface.ts","../src/types/generic/data-models/enums/utility.enums.ts","../src/types/customers/endpoint-payloads/create-account.payloads.ts","../src/types/customers/endpoint-payloads/account-recovery.payloads.ts","../src/types/customers/endpoint-payloads/login.payloads.ts","../src/types/customers/endpoint-payloads/initiate-verification.payloads.ts","../src/types/customers/endpoint-payloads/profile.payloads.ts","../src/types/customers/endpoint-payloads/business.payloads.ts","../src/types/customers/models/verification-application.models.ts","../src/types/customers/models/business-profile.model.ts","../src/types/transactions/models/transaction.model.ts","../src/types/transactions/models/coin.model.ts","../src/types/transactions/models/fiat.model.ts","../src/types/transactions/models/third-party-lp.model.ts","../src/types/transactions/endpoint-payload/retrieve-crypto-assets.payloads.ts","../src/types/transactions/endpoint-payload/retrieve-fiat-assets.payloads.ts","../src/types/transactions/endpoint-payload/manage-banks.payloads.ts","../src/types/transactions/endpoint-payload/manage-nubans.payloads.ts","../src/types/utils/models/job.model.ts","../src/types/utils/endpoint-payloads/manage-jobs.payloads.ts","../src/types/utils/endpoint-payloads/peference.payloads.ts","../src/sdks/internal/modules/customers.sdk.ts","../src/sdks/internal/modules/utils.sdk.ts","../src/sdks/internal/modules/transactions-module/assets-module/retrieve-assets.module.ts","../src/sdks/internal/modules/transactions-module/banks-module/manage-banks.module.ts","../src/sdks/internal/modules/transactions-module/transactions.sdk.ts","../src/sdks/internal/internal.sdk.ts","../src/constants/sockets.constants.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport axios, { AxiosResponse, Method } from 'axios';\nimport { ApiResponse, Endpoint, ScalexError } from '../types';\nimport {\n\tnotifyClientOfSuccess,\n\tnotifyClientOfFailure\n} from './send-api-response';\nexport const ScalexAuthHeaderName = 'scalexadminauthorization';\nexport const ScalexAuthBearerName = 'ScalexAdminBearer';\nexport const AuthorizationHeaderName = 'Authorization';\n\nexport async function makeHttpRequest( {\n\tmethod,\n\turl,\n\tbody,\n\theaders,\n\tquery,\n\tparams\n}: {\n  method: Method;\n  url: string;\n  body?: unknown;\n  headers?: any;\n  params?: Array<string>;\n  query?: any;\n} ): Promise<AxiosResponse> {\n\tconst aggregatedHeaders: any = {\n\t\t'Content-Type': 'application/json',\n\t\t'Access-Control-Allow-Credentials': true,\n\t\t'Access-Control-Allow-Headers': 'content-type',\n\t\t'Access-Control-Allow-Methods': 'GET,HEAD,PUT,POST,DELETE,PATCH'\n\t};\n\tif ( headers ) {\n\t\tif ( headers[ScalexAuthHeaderName] ) {\n\t\t\taggregatedHeaders[ScalexAuthHeaderName] = headers[ScalexAuthHeaderName];\n\t\t}\n\t\tif ( headers[AuthorizationHeaderName] ) {\n\t\t\taggregatedHeaders[AuthorizationHeaderName] =\n        headers[AuthorizationHeaderName];\n\t\t}\n\t}\n\n\tif ( params ) {\n\t\tparams.forEach( ( p ) => {\n\t\t\turl += `/${p}`;\n\t\t} );\n\t}\n\treturn axios( {\n\t\tmethod,\n\t\turl,\n\t\tdata: body,\n\t\theaders: aggregatedHeaders,\n\t\tparams: query\n\t} );\n}\n\nexport async function callApi<Input, Output, Query = Input>( requestParams: {\n  serviceUri: string;\n  endpoint: Endpoint;\n  headers?: unknown;\n  body?: Input;\n  params?: Array<string>;\n  query?: Query;\n} ): Promise<ApiResponse<Output>> {\n\ttry {\n\t\tconst response = await makeHttpRequest( {\n\t\t\tmethod: requestParams.endpoint.method,\n\t\t\tbody: requestParams.body,\n\t\t\tquery: requestParams.query,\n\t\t\theaders: requestParams.headers,\n\t\t\tparams: requestParams.params,\n\t\t\turl: `${requestParams.serviceUri}${requestParams.endpoint.fullPath}`\n\t\t} );\n\t\treturn notifyClientOfSuccess<Output>( response.data );\n\t} catch ( e: unknown ) {\n\t\tthrow notifyClientOfFailure( {\n\t\t\terror: e as ScalexError\n\t\t} );\n\t}\n}\n\nexport function setBearerToken( token: string ) {\n\treturn {\n\t\tAuthorization: `Bearer ${token}`\n\t};\n}\n","import { AxiosError, HttpStatusCode } from 'axios';\nimport { ApiResponse, ScalexError } from '../types';\n\nexport interface ScalexSuccessResponse<T> {\n\tstatusCode?: HttpStatusCode;\n\tmessage?: string;\n\tdata?: T;\n}\n\nexport function notifyClientOfSuccess<T>(\n\tpayload: ScalexSuccessResponse<T> = {\n\t\tstatusCode: HttpStatusCode.Ok,\n\t\tmessage: 'Your request was successful',\n\t\tdata: {} as never,\n\t}\n): ApiResponse<T> {\n\treturn {\n\t\tstatusCode: payload.statusCode ?? HttpStatusCode.Ok,\n\t\tmessage: payload.message as string ?? 'Your request was successful',\n\t\tdata: payload.data as T,\n\t};\n}\n\nexport function notifyClientOfFailure<T>(\n\t{\n\t\tdata = {} as never,\n\t\terror,\n\t}: {\n\t\tdata?: T;\n\t\terror: ScalexError | AxiosError\n\t}\n): ApiResponse<T> {\n\tif ( error instanceof AxiosError ) {\n\t\tconst scxError = error.response?.data as ScalexError;\n\t\treturn {\n\t\t\tstatusCode: scxError?.statusCode ?? 500,\n\t\t\tdata,\n\t\t\tmessage: scxError?.message ?? 'Something went terribly wrong. Please contact support',\n\t\t\terror: scxError\n\t\t};\n\t} \n\treturn {\n\t\tstatusCode: error?.statusCode ?? 500,\n\t\tdata,\n\t\tmessage: error?.message ?? 'Something went terribly wrong. Please contact support',\n\t\terror,\n\t};\n\n}","export enum HttpMethods {\n\tPost = 'POST',\n\tPut = 'PUT',\n\tGet = 'GET',\n\tPatch = 'PATCH',\n\tDelete = 'DELETE'\n}\n\nexport interface Endpoint {\n\tpath: string;\n\tmethod: HttpMethods;\n\tfullPath: string;\n}\n\nexport type Endpoints<T extends Array<string>> = {\n\t[k in keyof T]: Endpoint;\n}","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { HttpStatusCode } from \"axios\";\nimport { ScalexError } from \"./errors.interface\";\nimport { IUser } from \"./data-models/user/user.interface\";\n\nexport type ValuesOf<T extends any[]> = T[number];\nexport interface ApiResponse<T> {\n\tstatusCode: HttpStatusCode;\n\terror?: ScalexError;\n\tmessage: string;\n\tdata: T\n}\n\nexport enum TokenActions {\n\tLogin = 'login',\n\tDataAccess = 'data-access',\n\tSetPassword = 'set-password',\n\tRefresh='refresh',\n\tResetPassword='reset-password'\n}\n\nexport const TokenExpiry: {\n\t[key in TokenActions]: string\n} = {\n\t'set-password': '15m',\n\t'data-access': '3h',\n\trefresh: '1d',\n\t'reset-password': '15m',\n\t'login': '10m'\n};\n\nexport type DecodedJwtToken = { admin?: Partial<IUser>, action?: TokenActions }\nexport type ScalexAuthenticatedRequest = Request & DecodedJwtToken","import { VerifiableEntity } from \"../../../customers\";\nimport {IBaseModel} from \"../base.model\";\nimport {IAdminRoleMatrix} from \"./admin-role-matrix.interface\";\n\nexport interface IAddress extends IBaseModel {\n    location: {\n        country: string;\n        state: string;\n        city: string;\n        postalCode: string;\n        address: string;\n        utilityBill: string;\n    },\n    isVerified: boolean;\n}\n\nexport interface IVerification extends IBaseModel {\n    job: string,\n    entity: VerifiableEntity\n}\n\nexport interface IPassword {\n    token: string;\n    hint: string;\n    isActive: boolean\n}\n\nexport enum UserStatus {\n    Active = 'active',\n    Suspended = 'suspended',\n    Deactivated = 'deactivated'\n}\n\nexport enum AuthStatus {\n    loggedInWithout2fa = 'logged-in-without-2fa',\n    loggedInWith2fa = 'logged-in-with-2fa',\n    loggedOutByExpiredToken = 'logged-out-by-expired-token',\n    loggedOutManually = 'logged-out-manually',\n    neverLoggedIn = 'never-logged-in'\n}\n\nexport interface IUser extends IBaseModel {\n    fullName: string;\n    invitedBy?: string;\n    dateOfBirth?: Date;\n    email: string;\n    phone: string;\n    status: UserStatus;\n    roleMatrix: string | IAdminRoleMatrix;\n    passwords?: Array<IPassword>;\n    authStatus?: AuthStatus;\n    authStatusLastChangedAt?: Date;\n    passWordResetToken?: string;\n    passWordResetTokenExpiry?: Date;\n    twoFactorAuthSecret?: string;\n    twoFactorAuthActive?: boolean;\n    agreedToTerms: boolean;\n    addresses: Array<IAddress>;\n    hasVerifiedIdentity: boolean;\n    hasVerifiedAddress: boolean;\n    businesses: Array<string>;\n    pendingVerifications: Array<IVerification>\n}\n\nexport interface IUserMethods {\n    updatePassword(\n        newPassword: string,\n        hint?: string\n    ): void;\n\n    updateAuthStatus( status: AuthStatus ): void;\n    updatePasswordResetToken( token: string ): void;\n}\n","import { IBaseModel } from \"../base.model\";\n\nexport enum Continents {\n\tAF = 'Africa',\n\tAN = 'Antarctica',\n\tAS = 'Asia',\n\tEU = 'Europe',\n\tNA = 'North America',\n\tOC = 'Oceania',\n\tSA = 'South America',\n}\n\nexport interface ILanguage extends IBaseModel {\n\tname: string,\n\tshortCode: string,\n    native: string,\n}\n\nexport interface IPhoneCode extends IBaseModel {\n\tcode: string\n}\n\nexport interface IFiatCurrency extends IBaseModel {\n\tcurrency: string\n}\n\nexport interface ICountry extends IBaseModel {\n\tname: string,\n    native: string,\n    countryCode: string,\n    phoneCodes: Array<IPhoneCode> | Array<string>,\n    continent: Continents,\n    capital: string,\n    emoji: string,\n    currencies: Array<IFiatCurrency> | Array<string>,\n    languages: Array<ILanguage> | Array<string>,\n}\n","export enum ActiveOrInactive {\n    active = 'active',\n    inactive = 'inactive'\n}\n\nexport enum IntegrationType {\n    SDK = 'sdk',\n    REST = 'rest'\n}\n\nexport enum PassOrFail {\n    passed = 'passed',\n    failed = 'failed'\n}\n\nexport enum CurrencyType {\n    Crypto = 'crypto',\n    Fiat = 'fiat'\n}\n\nexport enum ResourceOwner {\n    business = 'business',\n    individual = 'individual'\n}","import { Endpoint, HttpMethods } from \"../../generic\";\n\nexport interface IRequestOtpToRegisterPayload {\n    email: string\n}\n\nexport interface IRequestOtpToRegisterResponse {\n    token: string;\n}\n\nexport const RequestOtpToRegisterEndpoint: Endpoint = {\n\tmethod: HttpMethods.Post,\n\tpath: '/otps',\n\tfullPath: '/customers-auth/otps'\n};\n\nexport interface IVerifyOtpAndCreatePasswordPayload {\n    otp: string;\n    password: string;\n    agreedToTerms: boolean;\n}\n\nexport interface IVerifyOtpAndCreatePasswordResponse {\n    token: string;\n}\n\nexport const VerifyOtpAndCreatePasswordEndpoint: Endpoint = {\n\tmethod: HttpMethods.Post,\n\tpath: '/passwords',\n\tfullPath: '/customers-auth/passwords'\n};\n\nexport interface IInitiate2faResponse {\n    qr: string;\n    secret: string;\n}\n\nexport const Initiate2faEndpoint: Endpoint = {\n\tmethod: HttpMethods.Post,\n\tpath: '/2fa',\n\tfullPath: '/customers-auth/2fa'\n};\n\nexport interface IVerify2faTokenPayload {\n    token: string;\n}\n\nexport const Verify2faEndpoint: Endpoint = {\n\tmethod: HttpMethods.Patch,\n\tpath: '/2fa',\n\tfullPath: '/customers-auth/2fa'\n};\n\n","import { Endpoint, HttpMethods } from \"../../generic\";\n\nexport interface IRequestPasswordResetPayload {\n    email: string\n}\n\nexport interface IRequestPasswordResetResponse {\n    token: string;\n}\n\nexport const RequestPasswordResetEndpoint: Endpoint = {\n\tmethod: HttpMethods.Post,\n\tpath: '',\n\tfullPath: '/customers-account-recovery'\n};\n\nexport interface IResetPasswordPayload {\n    otp: string;\n    password: string;\n    confirmPassword: string;\n}\n\nexport const ResetPasswordEndpoint: Endpoint = {\n\tmethod: HttpMethods.Patch,\n\tpath: '',\n\tfullPath: '/customers-account-recovery'\n};\n","import { Endpoint, HttpMethods, IUser } from \"../../generic\";\n\nexport interface IRequestOtpForLoginPayload {\n    email: string;\n}\n\nexport interface IVerifyOtpAndPasswordForLoginPayload {\n    otp: string;\n    password: string;\n}\n\nexport interface ILoginResponse {\n    token: string;\n}\n\nexport interface ITokenWithUserResponse {\n    token: string;\n    customer: Partial<IUser>\n}\n\nexport interface IVerify2faForLoginPayload {\n    token: string;\n}\n\nexport const RequestOtpForLoginEndpoint: Endpoint = {\n\tmethod: HttpMethods.Post,\n\tpath: '/login',\n\tfullPath: '/customers-auth/login'\n};\n\nexport const VerifyOtpAndPasswordForLoginEndpoint: Endpoint = {\n\tmethod: HttpMethods.Patch,\n\tpath: '/login',\n\tfullPath: '/customers-auth/login'\n};\n\nexport const Verify2faForLoginEndpoint: Endpoint = {\n\tmethod: HttpMethods.Patch,\n\tpath: '/login/2fa',\n\tfullPath: '/customers-auth/login/2fa'\n};","import {VerifiableEntity, VerificationApplicantType} from \"../models\";\nimport {Endpoint, HttpMethods} from \"../../generic\";\n\nexport interface IInitiateVerificationPayload {\n    entity: VerifiableEntity;\n\tapplicant: VerificationApplicantType;\n\tapplicantId?: string;\n}\n\nexport interface IInitiateVerificationResponse {\n    link: string;\n}\n\nexport const InitiateVerificationEndpoint: Endpoint = {\n\tmethod: HttpMethods.Post,\n\tpath: '/customer-verification',\n\tfullPath: '/customer-verification'\n};\n","import { Endpoint, HttpMethods, IUser} from \"../../generic\";\n\nexport interface IUpdateProfilePayload {\n    firstName: string;\n    lastName: string;\n    dateOfBirth: Date;\n}\n\nexport interface IUpdateAddressPayload {\n\tcountry: string;\n\tstate: string;\n\tcity: string;\n\tpostalCode: string;\n\taddress: string;\n\tutilityBill: string;\n}\n\nexport interface IUpdateAddressResponse {\n    customer: Partial<IUser>\n}\n\nexport interface IUpdateProfileResponse {\n    customer: Partial<IUser>\n}\n\nexport const UpdateProfileEndpoint: Endpoint = {\n\tmethod: HttpMethods.Patch,\n\tpath: '/customer-profile',\n\tfullPath: '/customer-profile'\n};\n\nexport const UpdateAddressEndpoint: Endpoint = {\n\tmethod: HttpMethods.Patch,\n\tpath: '/customer-address',\n\tfullPath: '/customer-address'\n};\n\nexport const RetrieveProfileEndpoint: Endpoint = {\n\tmethod: HttpMethods.Get,\n\tpath: '/customer-profile',\n\tfullPath: '/customer-profile'\n};\n","import {BusinessRegistrationType, IBusinessDirector, IBusinessProfile} from \"../models\";\nimport {IUpdateAddressPayload} from \"./profile.payloads\";\nimport {Endpoint, HttpMethods} from \"../../generic\";\n\nexport interface IBusinessDirectorDetails {\n    country: string;\n    firstName: string;\n    lastName: string;\n    dateOfBirth: Date;\n    address: string;\n}\n\nexport interface ICreateBusinessPayload {\n    registration: {\n        type: BusinessRegistrationType;\n        number: string;\n        date: Date;\n        country: string;\n        name: string;\n    }\n    agreedToKyc: boolean;\n}\n\nexport interface ICreateBusinessDirectorPayload {\n    creatorIsADirector: boolean;\n    directorDetails?: IBusinessDirectorDetails;\n}\n\nexport interface ICreateBusinessAddressPayload extends IUpdateAddressPayload {};\n\nexport interface IBusinessResponse {\n    business: IBusinessProfile;\n}\n\nexport interface IBusinessDirectorResponse {\n    director: IBusinessDirector;\n}\n\nexport const CreateBusinessEndpoint: Endpoint = {\n\tmethod: HttpMethods.Post,\n\tpath: '/businesses',\n\tfullPath: '/businesses'\n};\n\nexport const FetchBusinessEndpoint: Endpoint = {\n\tmethod: HttpMethods.Get,\n\tpath: '/businesses',\n\tfullPath: '/businesses'\n};\n\nexport const CreateBusinessDirectorEndpoint: Endpoint = {\n\tmethod: HttpMethods.Post,\n\tpath: '/directors',\n\tfullPath: '/businesses/directors'\n};\n\nexport const CreateBusinessAddressEndpoint: Endpoint = {\n\tmethod: HttpMethods.Post,\n\tpath: '/addresses',\n\tfullPath: '/businesses/addresses'\n};\n","import {ActiveOrInactive, IBaseModel, IntegrationType, PassOrFail} from \"../../generic\";\n\nexport enum VerifiableEntity {\n    governmentIssuedId = 'government-issued-id',\n    utilityBill = 'utility-bill',\n    businessRegistrationCertificate = 'business-registration-certificate',\n    phoneNumber = 'phone-number'\n}\n\nexport type VerificationResult = {\n    entity: VerifiableEntity;\n    status: PassOrFail\n}\n\nexport enum VerificationApplicantType {\n    individual = 'individual',\n    business = 'business',\n    director = 'director'\n}\n\nexport enum VerificationAction {\n    initiateJobWithPartner = 'initiate-job-with-partner',\n    confirmJobStatusWithPartner = 'confirm-job-status-with-partner',\n    updateLocalUserRecords = 'update-local-user-records'\n}\n\nexport enum VerificationStepType {\n    apiCall = 'api-call',\n    webhook = 'webhook'\n}\n\nexport enum VerificationRequirementStatus {\n    one = 'one',\n    all = 'all'\n}\n\nexport enum VerificationApplicationStatus {\n    cold = 'cold',\n    inProgress = 'in-progress',\n    expired = 'expired',\n    filled = 'filled',\n    failed = 'failed',\n    successful = 'successful'\n}\n\nexport type VerificationFlow = {\n    entity: VerifiableEntity;\n    status: ActiveOrInactive;\n    applicantTypes: Array<VerificationApplicantType>\n    steps: Array<{\n        index: number;\n        action: VerificationAction;\n        type: VerificationStepType;\n        endpoint: string;\n        payloads: {\n            request: string;\n            response: string;\n        }\n    }>\n}\n\nexport interface IVerificationPartner<ApiKeyType = unknown> extends IBaseModel {\n    name: string;\n    integrationType: IntegrationType\n    apiKeys: string | ApiKeyType;\n    status: ActiveOrInactive;\n\n    baseUrl?: string;\n    docsUrl?: string;\n    webhookUrl?: string;\n\n    processFlows: Array<VerificationFlow>;\n}\n\nexport interface IVerificationApplication extends IBaseModel {\n    applicant: string;\n    applicantType: VerificationApplicantType;\n    applications: Array<{\n        entity: VerifiableEntity;\n        partner: {\n            id: string;\n            processFlowSnapshot: string;\n        };\n        status: VerificationApplicationStatus;\n        steps: {\n            index: number;\n            request: string;\n            response: string;\n            status: VerificationApplicationStatus\n        }\n    }>\n}\n","import {IAddress, IBaseModel, IVerification} from \"../../generic\";\n\nexport enum BusinessRegistrationType {\n    businessName = 'business-name',\n    privateOrPublicLtd = 'private-public-ltd',\n    incorporatedTrustees = 'incorporated-trustees'\n}\n\nexport interface IBusinessDirector extends IBaseModel {\n    country: string;\n    firstName: string;\n    lastName: string;\n    dateOfBirth: Date;\n    residentialAddress: string;\n    hasVerifiedIdentity: boolean;\n}\n\nexport interface IBusinessProfile<T = unknown> extends IBaseModel {\n    customer: string;\n    registration: {\n        name: string;\n        number: string;\n        country: string;\n        isVerified: boolean;\n        date: Date;\n        type: BusinessRegistrationType;\n    }\n    creatorIsADirector: boolean;\n    agreedToKyc: boolean;\n    hasVerifiedDirector: boolean;\n    addresses: Array<IAddress>;\n    directors: Array<IBusinessDirector>;\n    pendingVerifications: Array<IVerification>;\n    metadata?: T\n}\n","import {CurrencyType, IBaseModel, ResourceOwner} from \"../../generic\";\nimport { IBankAccount } from \"./bank-account.model\";\nimport {IRate} from \"./rate.model\";\n\nexport enum CrytpoProviders {\n\tshyft = 'shyft',\n\tliminal = 'liminal',\n\tbitnob = 'bitnob',\n}\n\nexport enum TransactionType {\n    onramp = 'onramp',\n    offramp = 'offramp',\n    transfer = 'transfer',\n    deposit = 'deposit'\n}\n\nexport enum TransactionStatus {\n    initiated = 'initiated',\n    awaitingConsumation = 'awaiting-consumation',\n    processing = 'processing',\n    successful = 'successful',\n    failed = 'failed',\n    expired = 'expired',\n    cancelled = 'cancelled'\n}\n\nexport type ICurrencyAndAmount = {\n    currencyType: CurrencyType;\n    currency: {\n        id: string;\n        networkId?: string;\n        chainId?: string;\n    }\n    amount: number;\n}\n\nexport type ITransactionRecipient = {\n    type?: ResourceOwner;\n    id?: string;\n    isInternal: boolean;\n    address?: string;\n    addressPassword?: string;\n    bankAccount?: IBankAccount;\n}\n\nexport interface ITransaction extends IBaseModel {\n    reference: string;\n    initiator?: ITransactionRecipient;\n    type: TransactionType;\n    status: TransactionStatus;\n    volume: {\n        initiated?: ICurrencyAndAmount;\n        toBeConsumated?: ICurrencyAndAmount;\n        consumated?: ICurrencyAndAmount;\n    };\n    hash: string;\n    recipient: ITransactionRecipient\n    product: string;\n    fee: {\n        id?: string;\n        charge: ICurrencyAndAmount\n    }\n    meta: {\n        revenue?: string;\n        snapshots?: {\n            rates?: {\n                start?: {\n                    currencyToUsdt: IRate;\n                    currencyToRequest?: IRate;\n                    usdtToNaira: IRate;\n                },\n                end?: {\n                    currencyToUsdt: IRate;\n                    currencyToRequest?: IRate;\n                    usdtToNaira: IRate;\n                }\n            };\n            fees?: unknown;\n        }\n        productConfig?: unknown;\n        ledgerBalance: {\n            before: number;\n            after: number;\n        };\n        thirdParty?: {\n            provider?: CrytpoProviders;\n            reference?: string;\n        }\n    }\n}","import { IBaseModel } from \"../../generic\";\nimport { IRate } from \"./rate.model\";\nimport { LpProviders } from \"./third-party-lp.model\";\n\nexport interface iNetwork {\n\tid: string, // | Types.ObjectId ,\n\tisActive?: boolean\n}\n\nexport enum CoinSymbols {\n\tUSDT = 'USDT',\n\tUSDC = 'USDC',\n\tBTC = 'BTC',\n}\n\nexport const CoinFulNames: Record<CoinSymbols, string> = {\n\tUSDT: 'Tether USD',\n\tUSDC: 'USD Coin',\n\tBTC: 'Bitcoin',\n};\n\nexport type CoinFulNamesTypes = keyof typeof CoinFulNames;\nexport interface ICoin extends IBaseModel{\n\tsymbol: string,\n\tfullName?: string,\n\tlogo: string,\n\tisActive?: boolean,\n\talias: {\n\t\t[K in keyof typeof LpProviders]?: string;\n\t},\n\trates?: Array<IRate> | Array<string>,\n\tnetworks: Array<iNetwork> | Array<string> \n}","import { ICountry } from \"../../generic\";\nimport { IRate } from \"./rate.model\";\n\nexport interface IFiat {\n\tsymbol: string,\n\tabbr: string,\n\tshortName: string,\n\tfullName: string,\n\tlogo: string,\n\trates: Array<IRate> | Array<string>,\n\tisActive: boolean,\n\tcountry: ICountry | string\n}\n\nexport enum AssetStatus {\n\tActive = 'active',\n\tSuspended = 'suspended',\n\tLocked = 'locked',\n\tDestroyed = 'destroyed',\n}\n\nexport interface Nuban {\n\taccountNumber: string,\n\tprovider: string;\n\tbank: string;\n\tisActive: boolean;\n}\n\nexport interface IFiatWallet {\n\tcustomerId: string,\n\tfiatId: string,\n\tledgerBalance: number,\n\tlockedBalance: number,\n\tstatus: AssetStatus,\n\tnuban: Nuban\n}\n\nexport interface FiatFunctions {\n\tname: string,\n\tprovider: string,\n\tproduct: string,\n\tisActive: boolean\n}\n\nexport enum FiatProviders {\n\tPaga = 'Paga',\n\tPayaza = 'Payaza',\n\tPolaris = 'Polaris',\n\tBani = 'Bani',\n}\n\nexport interface IFiatDependencyApiKeys {\n\t[provider: string]: {\n\t\tapiKey: string;\n\t\tsecretKey?: string;\n\t\tpin?: string;\n\t\taccountReference?: string;\n\t\thmac?: string;\n\t\tstaticUrl?: string;\n\t\ttribe_account_ref?: string,\n\t\taccess_token?: string\n\t};\n}","export enum LpPaymentMethod {\n\tCrypto = 'Crypto',\n\tBank = 'Bank',\n}\n\nexport enum LpFiatCurrencyNetwork {\n\tLocal = 'LOCAL'\n}\n\nexport interface LpApiKeys {\n\tsecretKey: string,\n\tstaticUrl: string\n}\n\nexport enum LpProviders {\n\tXendBridge = 'XendBridge'\n}","import { Endpoint, HttpMethods } from \"../../generic\";\nimport { ICoin } from \"../models\";\n\nexport interface IRetrieveCryptoTokensResponse {\n    coins: Array<ICoin>;\n}\n\nexport const RetrieveCryptoTokensEndpoint: Endpoint = {\n\tmethod: HttpMethods.Get,\n\tpath: '',\n\tfullPath: '/list-coins'\n};\n","\nimport { Endpoint, HttpMethods } from \"../../generic\";\nimport { IFiat } from \"../models\";\n\nexport interface IRetrieveFiatCurrenciesResponse {\n    currencies: Array<IFiat>;\n}\n\nexport const RetrieveFiatCurrenciesEndpoint: Endpoint = {\n\tmethod: HttpMethods.Get,\n\tpath: '',\n\tfullPath: '/list-fiat-currencies'\n};\n","import { Endpoint, HttpMethods } from \"../../generic\";\nimport { IBank } from \"../models\";\n\nexport interface IRetrieveBankListsPayload {\n    currency: string;\n    product: string;\n}\n\nexport interface IRetrieveBankListsResponse {\n    banks: Array<Partial<IBank>>;\n}\n\nexport const RetrieveBankListsEndpoint: Endpoint = {\n\tmethod: HttpMethods.Get,\n\tpath: '',\n\tfullPath: '/list-banks'\n};\n\nexport interface IResolveBankAccountInfoPayload {\n    bankCode: string;\n    accountNumber: string;\n    currency: string;\n    product: string;\n}\n\nexport interface IResolveBankAccountInfoResponse {\n    bank: IBank; // TODO: Update this in FiatModules\n}\n\nexport const ResolveBankAccountInfoEndpoint: Endpoint = {\n\tmethod: HttpMethods.Post,\n\tpath: '',\n\tfullPath: '/resolve-bank-account'\n};\n","import { Endpoint, HttpMethods } from \"../../generic\";\nimport { IFiatWallet } from \"../models\";\n\nexport interface IRetrievePersistentNubanPayload {\n    transactionId: string,\n\tamount: number,\n\tcurrency: string,\n\tcountryCode?: string,\n\tholder: {\n\t\tname: string,\n\t\temail: string,\n\t\tphone?: string,\n\t}\n}\n\nexport interface IRetrievePersistentNubanResponse {\n    nuban: IFiatWallet\n}\n\nexport const RetrievePersistentNubanEndpoint: Endpoint = {\n\tmethod: HttpMethods.Post,\n\tpath: '',\n\tfullPath: '/retrieve-persistent-nuban'\n};","import { IBaseModel } from \"../../generic\";\n\n\nexport enum JobStatus {\n  initiated = 'initiated',\n  pending = 'pending',\n  completed = 'completed',\n  failed = 'failed'\n}\n\nexport enum JobTask {\n  kyc = 'kyc',\n  kyb = 'kyb'\n}\n\nexport enum JobClientType {\n  merchant = 'merchant',\n  customer = 'customer',\n  business = 'business',\n  businessDirector = 'business-director',\n  admin = 'admin',\n  system = 'system'\n}\n\nexport interface IJob<T = unknown> extends IBaseModel {\n  status: JobStatus;\n  client: {\n    type: JobClientType;\n    id?: string;\n  }\n  reports: Array<string>;\n  description: string;\n  task: JobTask;\n  metadata: T;\n}\n","import { Endpoint, HttpMethods } from \"../../generic\";\nimport {IJob} from \"../models\";\n\nexport interface IViewJobPayload {\n  jobId: string;\n}\n\nexport interface IJobResponse<T> {\n  job: IJob<T>\n}\n\nexport const FetchJobEndpoint: Endpoint = {\n\tmethod: HttpMethods.Get,\n\tpath: '/jobs',\n\tfullPath: '/jobs'\n};\n","import { Endpoint, HttpMethods, ICountry } from \"../../generic\";\n\nexport interface IRetrieveCountriesResponse {\n    countries: Array<Partial<ICountry>>\n}\n\nexport const RetrieveCountriesEndpoint: Endpoint = {\n\tmethod: HttpMethods.Get,\n\tpath: '/preferences/countries',\n\tfullPath: '/preferences/countries',\n};\n","import { ScalexSuccessResponse, callApi, setBearerToken } from \"../../../functions\";\nimport {\n\tIInitiate2faResponse,\n\tIRequestOtpToRegisterPayload,\n\tIRequestOtpToRegisterResponse,\n\tIRequestPasswordResetPayload,\n\tIRequestPasswordResetResponse,\n\tIResetPasswordPayload,\n\tIVerify2faTokenPayload,\n\tIVerifyOtpAndCreatePasswordPayload,\n\tIVerifyOtpAndCreatePasswordResponse,\n\tInitiate2faEndpoint,\n\tRequestOtpToRegisterEndpoint,\n\tRequestPasswordResetEndpoint,\n\tResetPasswordEndpoint,\n\tVerify2faEndpoint,\n\tVerifyOtpAndCreatePasswordEndpoint,\n\tIRequestOtpForLoginPayload,\n\tILoginResponse,\n\tRequestOtpForLoginEndpoint,\n\tIVerifyOtpAndPasswordForLoginPayload,\n\tVerifyOtpAndPasswordForLoginEndpoint,\n\tIVerify2faForLoginPayload,\n\tVerify2faForLoginEndpoint,\n\tITokenWithUserResponse,\n\tIInitiateVerificationPayload,\n\tIInitiateVerificationResponse,\n\tInitiateVerificationEndpoint,\n\tUpdateProfileEndpoint,\n\tIUpdateProfilePayload,\n\tIUpdateProfileResponse,\n\tRetrieveProfileEndpoint,\n\tIUpdateAddressPayload,\n\tIUpdateAddressResponse,\n\tUpdateAddressEndpoint,\n\tICreateBusinessPayload,\n\tIJobResponse,\n\tICreateBusinessDirectorPayload,\n\tIBusinessResponse,\n\tCreateBusinessEndpoint,\n\tCreateBusinessAddressEndpoint,\n\tICreateBusinessAddressPayload, IBusinessDirectorResponse, CreateBusinessDirectorEndpoint, IHasQueryIdPayload,\n\tIBusinessProfile,\n\tFetchBusinessEndpoint\n} from \"../../../types\";\n\nexport class ScalexCustomersSdk {\n\tconstructor( protected apiUrl: string ) {}\n\n\tasync requestOtpToRegister( payload: IRequestOtpToRegisterPayload )\n    : Promise<ScalexSuccessResponse<IRequestOtpToRegisterResponse>> {\n\t\treturn callApi<IRequestOtpToRegisterPayload, IRequestOtpToRegisterResponse>( {\n\t\t\tserviceUri: this.apiUrl,\n\t\t\tendpoint: RequestOtpToRegisterEndpoint,\n\t\t\tbody: payload\n\t\t} );\n\t}\n\n\tasync verifyOtpAndCreatePassword( payload: IVerifyOtpAndCreatePasswordPayload, authToken: string )\n    : Promise<ScalexSuccessResponse<IVerifyOtpAndCreatePasswordResponse>> {\n\t\treturn callApi<IVerifyOtpAndCreatePasswordPayload, IVerifyOtpAndCreatePasswordResponse>( {\n\t\t\tserviceUri: this.apiUrl,\n\t\t\tendpoint: VerifyOtpAndCreatePasswordEndpoint,\n\t\t\tbody: payload,\n\t\t\theaders: {\n\t\t\t\t...setBearerToken( authToken )\n\t\t\t}\n\t\t} );\n\t}\n\n\tasync initiate2faRegistration( authToken: string )\n    : Promise<ScalexSuccessResponse<IInitiate2faResponse>> {\n\t\treturn callApi<null, IInitiate2faResponse>( {\n\t\t\tserviceUri: this.apiUrl,\n\t\t\tendpoint: Initiate2faEndpoint,\n\t\t\theaders: {\n\t\t\t\t...setBearerToken( authToken )\n\t\t\t}\n\t\t} );\n\t}\n\n\tasync verify2faToken( payload: IVerify2faTokenPayload, authToken: string )\n    : Promise<ScalexSuccessResponse<ITokenWithUserResponse>> {\n\t\treturn callApi<IVerify2faTokenPayload, ITokenWithUserResponse>( {\n\t\t\tserviceUri: this.apiUrl,\n\t\t\tendpoint: Verify2faEndpoint,\n\t\t\tbody: payload,\n\t\t\theaders: {\n\t\t\t\t...setBearerToken( authToken )\n\t\t\t}\n\t\t} );\n\t}\n\n\tasync requestPasswordReset( payload: IRequestPasswordResetPayload )\n    : Promise<ScalexSuccessResponse<IRequestPasswordResetResponse>> {\n\t\treturn callApi<IRequestPasswordResetPayload, IRequestPasswordResetResponse>( {\n\t\t\tserviceUri: this.apiUrl,\n\t\t\tendpoint: RequestPasswordResetEndpoint,\n\t\t\tbody: payload\n\t\t} );\n\t}\n\n\tasync resetPassword( payload: IResetPasswordPayload, authToken: string )\n    : Promise<ScalexSuccessResponse<null>> {\n\t\treturn callApi<IResetPasswordPayload, null>( {\n\t\t\tserviceUri: this.apiUrl,\n\t\t\tendpoint: ResetPasswordEndpoint,\n\t\t\tbody: payload,\n\t\t\theaders: {\n\t\t\t\t...setBearerToken( authToken )\n\t\t\t}\n\t\t} );\n\t}\n\n\tasync requestOtpToLogin( payload: IRequestOtpForLoginPayload )\n        : Promise<ScalexSuccessResponse<ILoginResponse>> {\n\t\treturn callApi<IRequestOtpForLoginPayload, ILoginResponse>( {\n\t\t\tserviceUri: this.apiUrl,\n\t\t\tendpoint: RequestOtpForLoginEndpoint,\n\t\t\tbody: payload,\n\t\t} );\n\t}\n\n\tasync verifyOtpAndPasswordForLogin( payload: IVerifyOtpAndPasswordForLoginPayload, authToken: string )\n        : Promise<ScalexSuccessResponse<ITokenWithUserResponse>> {\n\t\treturn callApi<IVerifyOtpAndPasswordForLoginPayload, ITokenWithUserResponse>( {\n\t\t\tserviceUri: this.apiUrl,\n\t\t\tendpoint: VerifyOtpAndPasswordForLoginEndpoint,\n\t\t\tbody: payload,\n\t\t\theaders: {\n\t\t\t\t...setBearerToken( authToken )\n\t\t\t}\n\t\t} );\n\t}\n\n\tasync verify2faForLogin( payload: IVerify2faForLoginPayload, authToken: string )\n        : Promise<ScalexSuccessResponse<ILoginResponse>> {\n\t\treturn callApi<IVerify2faForLoginPayload, ILoginResponse>( {\n\t\t\tserviceUri: this.apiUrl,\n\t\t\tendpoint: Verify2faForLoginEndpoint,\n\t\t\tbody: payload,\n\t\t\theaders: {\n\t\t\t\t...setBearerToken( authToken )\n\t\t\t}\n\t\t} );\n\t}\n\n\tasync updateProfile( payload: IUpdateProfilePayload, authToken: string )\n        : Promise<ScalexSuccessResponse<IUpdateProfileResponse>> {\n\t\treturn callApi<IUpdateProfilePayload, IUpdateProfileResponse>( {\n\t\t\tserviceUri: this.apiUrl,\n\t\t\tendpoint: UpdateProfileEndpoint,\n\t\t\tbody: payload,\n\t\t\theaders: {\n\t\t\t\t...setBearerToken( authToken )\n\t\t\t}\n\t\t} );\n\t}\n\n\tasync retrieveProfile( authToken: string )\n        : Promise<ScalexSuccessResponse<IUpdateProfileResponse>> {\n\t\treturn callApi<null, IUpdateProfileResponse>( {\n\t\t\tserviceUri: this.apiUrl,\n\t\t\tendpoint: RetrieveProfileEndpoint,\n\t\t\theaders: {\n\t\t\t\t...setBearerToken( authToken )\n\t\t\t}\n\t\t} );\n\t}\n\n\tasync initiateVerification( payload: IInitiateVerificationPayload, authToken: string )\n        : Promise<ScalexSuccessResponse<IJobResponse<IInitiateVerificationResponse>>> {\n\t\treturn callApi<IInitiateVerificationPayload, IJobResponse<IInitiateVerificationResponse>>( {\n\t\t\tserviceUri: this.apiUrl,\n\t\t\tendpoint: InitiateVerificationEndpoint,\n\t\t\tbody: payload,\n\t\t\theaders: {\n\t\t\t\t...setBearerToken( authToken )\n\t\t\t}\n\t\t} );\n\t}\n\n\tasync updateAddress( payload: IUpdateAddressPayload, authToken: string )\n        : Promise<ScalexSuccessResponse<IUpdateAddressResponse>> {\n\t\treturn callApi<IUpdateAddressPayload, IUpdateAddressResponse>( {\n\t\t\tserviceUri: this.apiUrl,\n\t\t\tendpoint: UpdateAddressEndpoint,\n\t\t\tbody: payload,\n\t\t\theaders: {\n\t\t\t\t...setBearerToken( authToken )\n\t\t\t}\n\t\t} );\n\t}\n\n\tasync createBusiness( payload: ICreateBusinessPayload, authToken: string )\n        : Promise<ScalexSuccessResponse<IBusinessResponse>> {\n\t\treturn callApi<ICreateBusinessPayload, IBusinessResponse>( {\n\t\t\tserviceUri: this.apiUrl,\n\t\t\tendpoint: CreateBusinessEndpoint,\n\t\t\tbody: payload,\n\t\t\theaders: {\n\t\t\t\t...setBearerToken( authToken )\n\t\t\t}\n\t\t} );\n\t}\n\n\tasync createBusinessDirector( payload: ICreateBusinessDirectorPayload, businessId: string, authToken: string )\n\t\t: Promise<ScalexSuccessResponse<IBusinessDirectorResponse>> {\n\t\treturn callApi<ICreateBusinessDirectorPayload, IBusinessDirectorResponse, IHasQueryIdPayload>( {\n\t\t\tserviceUri: this.apiUrl,\n\t\t\tendpoint: CreateBusinessDirectorEndpoint,\n\t\t\tbody: payload,\n\t\t\tquery: {\n\t\t\t\tid: businessId\n\t\t\t},\n\t\t\theaders: {\n\t\t\t\t...setBearerToken( authToken )\n\t\t\t}\n\t\t} );\n\t}\n\n\tasync createBusinessAddress( payload: ICreateBusinessAddressPayload, businessId: string, authToken: string )\n\t\t: Promise<ScalexSuccessResponse<IBusinessResponse>> {\n\t\treturn callApi<ICreateBusinessAddressPayload, IBusinessResponse, IHasQueryIdPayload>( {\n\t\t\tserviceUri: this.apiUrl,\n\t\t\tendpoint: CreateBusinessAddressEndpoint,\n\t\t\tbody: payload,\n\t\t\tquery: {\n\t\t\t\tid: businessId\n\t\t\t},\n\t\t\theaders: {\n\t\t\t\t...setBearerToken( authToken )\n\t\t\t}\n\t\t} );\n\t}\n\n\tasync retrieveBusiness( businessId: string, authToken: string )\n        : Promise<ScalexSuccessResponse<IBusinessProfile>> {\n\t\treturn callApi<IHasQueryIdPayload, IBusinessProfile>( {\n\t\t\tserviceUri: this.apiUrl,\n\t\t\tendpoint: FetchBusinessEndpoint,\n\t\t\tquery: {\n\t\t\t\tid: businessId\n\t\t\t},\n\t\t\theaders: {\n\t\t\t\t...setBearerToken( authToken )\n\t\t\t}\n\t\t} );\n\t}\n}\n","import {\n\tFetchJobEndpoint,\n\tIHasQueryIdPayload,\n\tIJobResponse,\n\tIRetrieveCountriesResponse,\n\tRetrieveCountriesEndpoint,\n} from \"../../../types\";\nimport {callApi, ScalexSuccessResponse, setBearerToken} from \"../../../functions\";\n\nexport class ScalexUtilsSdk {\n\tconstructor( protected apiUrl: string ) {}\n\tasync retrieveCountries( )\n        : Promise<ScalexSuccessResponse<IRetrieveCountriesResponse>> {\n\t\treturn callApi<null, IRetrieveCountriesResponse>( {\n\t\t\tserviceUri: this.apiUrl,\n\t\t\tendpoint: RetrieveCountriesEndpoint,\n\t\t} );\n\t}\n\n\tasync fetchJob( jobId: string, authToken: string )\n        : Promise<ScalexSuccessResponse<IJobResponse<unknown>>> {\n\t\treturn callApi<null, IJobResponse<unknown>, IHasQueryIdPayload>( {\n\t\t\tserviceUri: this.apiUrl,\n\t\t\tendpoint: FetchJobEndpoint,\n\t\t\tquery: {\n\t\t\t\tid: jobId\n\t\t\t},\n\t\t\theaders: {\n\t\t\t\t...setBearerToken( authToken )\n\t\t\t}\n\t\t} );\n\t}\n}\n","import { ScalexSuccessResponse, callApi } from \"../../../../../functions\";\nimport { IRetrieveCryptoTokensResponse, RetrieveCryptoTokensEndpoint } from \"../../../../../types\";\nimport { IRetrieveFiatCurrenciesResponse, RetrieveFiatCurrenciesEndpoint } from \"../../../../../types/transactions/endpoint-payload/retrieve-fiat-assets.payloads\";\n\nexport class AssetsModule {\n\tconstructor( protected apiUrl: string ) {}\n\n\tasync retrieveCryptoTokens()\n    : Promise<ScalexSuccessResponse<IRetrieveCryptoTokensResponse>> {\n\t\treturn callApi<void, IRetrieveCryptoTokensResponse>( {\n\t\t\tserviceUri: this.apiUrl,\n\t\t\tendpoint: RetrieveCryptoTokensEndpoint\n\t\t} );\n\t}\n\n\tasync retrieveFiatCurrencies()\n    : Promise<ScalexSuccessResponse<IRetrieveFiatCurrenciesResponse>> {\n\t\treturn callApi<void, IRetrieveFiatCurrenciesResponse>( {\n\t\t\tserviceUri: this.apiUrl,\n\t\t\tendpoint: RetrieveFiatCurrenciesEndpoint\n\t\t} );\n\t}\n}","import { ScalexSuccessResponse, callApi } from \"../../../../../functions\";\nimport { IResolveBankAccountInfoPayload, IResolveBankAccountInfoResponse, IRetrieveBankListsPayload, IRetrieveBankListsResponse, ResolveBankAccountInfoEndpoint, RetrieveBankListsEndpoint } from \"../../../../../types\";\n\n\nexport class BanksModule {\n\tconstructor( protected apiUrl: string ) {}\n\n\tasync retrieveBankLists( payload: IRetrieveBankListsPayload )\n    : Promise<ScalexSuccessResponse<IRetrieveBankListsResponse>> {\n\t\treturn callApi<IRetrieveBankListsPayload, IRetrieveBankListsResponse>( {\n\t\t\tserviceUri: this.apiUrl,\n\t\t\tendpoint: RetrieveBankListsEndpoint,\n\t\t\tquery: payload\n\t\t} );\n\t}\n\n\tasync resolveBankAccount( payload: IResolveBankAccountInfoPayload )\n    : Promise<ScalexSuccessResponse<IResolveBankAccountInfoResponse>> {\n\t\treturn callApi<IResolveBankAccountInfoPayload, IResolveBankAccountInfoResponse>( {\n\t\t\tserviceUri: this.apiUrl,\n\t\t\tendpoint: ResolveBankAccountInfoEndpoint,\n\t\t\tbody: payload\n\t\t} );\n\t}\n    \n}","import { AssetsModule } from './assets-module';\nimport { BanksModule } from './banks-module';\n\nexport class ScalexTransactionsSdk {\n\tpublic readonly assets: AssetsModule;\n\tpublic readonly banks: BanksModule;\n\n\tconstructor( protected apiUrl: string ) {\n\t\tthis.assets = new AssetsModule( apiUrl );\n\t\tthis.banks = new BanksModule( apiUrl );\n\t}\n}","import {ScalexCustomersSdk, ScalexTransactionsSdk, ScalexUtilsSdk} from \"./modules\";\n\nexport enum ScalexInternalEnvironments {\n    local = 'local',\n    dev = 'dev',\n    prod = 'prod'\n};\n\nexport enum ScalexInternalApiVersions {\n    v1 = '/v1',\n}\n\nconst InternalEnvironmentUrls: {\n    [key in ScalexInternalEnvironments]: string;\n} = {\n\tlocal: 'http://localhost:8500',\n\tdev: 'https://scalex-api-gateway-dev.up.railway.app',\n\tprod: 'https://scalex-api.up.railway.app'\n};\n\nexport class ScalexInternalAPI {\n\tprivate readonly apiUrl: string;\n\tcustomers: ScalexCustomersSdk;\n\ttransaction: ScalexTransactionsSdk;\n\tutils: ScalexUtilsSdk;\n\n\tconstructor(\n\t\tenvironment: ScalexInternalEnvironments = ScalexInternalEnvironments.dev,\n\t\tversion: ScalexInternalApiVersions = ScalexInternalApiVersions.v1\n\t) {\n\t\tthis.apiUrl = InternalEnvironmentUrls[environment] + version;\n\t\tthis.customers = new ScalexCustomersSdk( this.apiUrl );\n\t\tthis.transaction = new ScalexTransactionsSdk( this.apiUrl );\n\t\tthis.utils = new ScalexUtilsSdk( this.apiUrl );\n\t}\n}\n","export const socketChannelsAndEvents = {\n\tjobs: {\n\t\tchannelName: 'job-stream',\n\t\tevents: {\n\t\t\tcompleted: 'completed-job'\n\t\t}\n\t}\n};\n"],"mappings":"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","names":["HttpMethods","TokenActions","UserStatus","AuthStatus","Continents","ActiveOrInactive","IntegrationType","PassOrFail","CurrencyType","ResourceOwner","VerifiableEntity","VerificationApplicantType","VerificationAction","VerificationStepType","VerificationRequirementStatus","VerificationApplicationStatus","BusinessRegistrationType","CrytpoProviders","TransactionType","TransactionStatus","CoinSymbols","AssetStatus","FiatProviders","LpPaymentMethod","LpFiatCurrencyNetwork","LpProviders","JobStatus","JobTask","JobClientType","ScalexInternalEnvironments","ScalexInternalApiVersions"]}