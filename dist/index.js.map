{"version":3,"sources":["../src/functions/call-api.function.ts","../src/functions/send-api-response.ts","../src/types/generic/endpoints.interface.ts","../src/types/generic/api-response.type.ts","../src/types/generic/data-models/user/user.interfaces.ts","../src/types/generic/data-models/enums/utility.enums.ts","../src/types/customers/endpoint-payloads/create-account.payloads.ts","../src/types/customers/endpoint-payloads/account-recovery.payloads.ts","../src/types/customers/endpoint-payloads/login.payloads.ts","../src/types/customers/endpoint-payloads/initiate-verification.payloads.ts","../src/types/customers/endpoint-payloads/profile.payloads.ts","../src/types/customers/models/verification.models.ts","../src/sdks/internal/modules/customers.sdk.ts","../src/sdks/internal/internal.sdk.ts","../src/constants/sockets.constants.ts"],"sourcesContent":["import axios, { AxiosRequestConfig, AxiosResponse, Method } from 'axios';\nimport { ApiResponse, Endpoint, ScalexError } from '../types';\nimport {\n  notifyClientOfSuccess,\n  notifyClientOfFailure\n} from './send-api-response';\nexport const ScalexAuthHeaderName = 'scalexadminauthorization';\nexport const ScalexAuthBearerName = 'ScalexAdminBearer';\nexport const AuthorizationHeaderName = 'Authorization';\n\nexport async function makeHttpRequest({\n  method,\n  url,\n  body,\n  headers,\n  query,\n  params\n}: {\n  method: Method;\n  url: string;\n  body?: unknown;\n  headers?: any;\n  params?: Array<string>;\n  query?: any;\n}): Promise<AxiosResponse> {\n  const aggregatedHeaders: any = {\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Credentials': true,\n    'Access-Control-Allow-Headers': 'content-type',\n    'Access-Control-Allow-Methods': 'GET,HEAD,PUT,POST,DELETE,PATCH'\n  };\n  if (headers) {\n    if (headers[ScalexAuthHeaderName]) {\n      aggregatedHeaders[ScalexAuthHeaderName] = headers[ScalexAuthHeaderName];\n    }\n    if (headers[AuthorizationHeaderName]) {\n      aggregatedHeaders[AuthorizationHeaderName] =\n        headers[AuthorizationHeaderName];\n    }\n  }\n\n  if (params) {\n    params.forEach((p) => {\n      url += `/${p}`;\n    });\n  }\n  return axios({\n    method,\n    url,\n    data: body,\n    headers: aggregatedHeaders,\n    params: query,\n  });\n}\n\nexport async function callApi<Input, Output>(requestParams: {\n  serviceUri: string;\n  endpoint: Endpoint;\n  headers?: unknown;\n  body?: Input;\n  params?: Array<string>;\n  query?: unknown;\n}): Promise<ApiResponse<Output>> {\n  try {\n    const response = await makeHttpRequest({\n      method: requestParams.endpoint.method,\n      body: requestParams.body,\n      query: requestParams.query,\n      headers: requestParams.headers,\n      params: requestParams.params,\n      url: `${requestParams.serviceUri}${requestParams.endpoint.fullPath}`\n    });\n    return notifyClientOfSuccess<Output>(response.data);\n  } catch (e: unknown) {\n    throw notifyClientOfFailure({\n      error: e as ScalexError\n    });\n  }\n}\n\nexport function setBearerToken(token: string) {\n  return {\n    Authorization: `Bearer ${token}`\n  };\n}\n\nexport const myInterceptor = axios.interceptors.request.use(\n  (config: AxiosRequestConfig | any) => {\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);","import { AxiosError, HttpStatusCode } from 'axios';\nimport { ApiResponse, ScalexError } from '../types';\n\nexport interface ScalexSuccessResponse<T> {\n\tstatusCode?: HttpStatusCode;\n\tmessage?: string;\n\tdata?: T;\n}\n\nexport function notifyClientOfSuccess<T>(\n\tpayload: ScalexSuccessResponse<T> = {\n\t\tstatusCode: HttpStatusCode.Ok,\n\t\tmessage: 'Your request was successful',\n\t\tdata: {} as never,\n\t}\n): ApiResponse<T> {\n\treturn {\n\t\tstatusCode: payload.statusCode ?? HttpStatusCode.Ok,\n\t\tmessage: payload.message as string ?? 'Your request was successful',\n\t\tdata: payload.data as T,\n\t};\n}\n\nexport function notifyClientOfFailure<T>(\n\t{\n\t\tdata = {} as never,\n\t\terror,\n\t}: {\n\t\tdata?: T;\n\t\terror: ScalexError | AxiosError\n\t}\n): ApiResponse<T> {\n\tif ( error instanceof AxiosError ) {\n\t\tconst scxError = error.response?.data as ScalexError;\n\t\treturn {\n\t\t\tstatusCode: scxError?.statusCode ?? 500,\n\t\t\tdata,\n\t\t\tmessage: scxError?.message ?? 'Something went terribly wrong. Please contact support',\n\t\t\terror: scxError\n\t\t};\n\t} \n\treturn {\n\t\tstatusCode: error?.statusCode ?? 500,\n\t\tdata,\n\t\tmessage: error?.message ?? 'Something went terribly wrong. Please contact support',\n\t\terror,\n\t};\n\n}","export enum HttpMethods {\n\tPost = 'POST',\n\tPut = 'PUT',\n\tGet = 'GET',\n\tPatch = 'PATCH',\n\tDelete = 'DELETE'\n}\n\nexport interface Endpoint {\n\tpath: string;\n\tmethod: HttpMethods;\n\tfullPath: string;\n}\n\nexport type Endpoints<T extends Array<string>> = {\n\t[k in keyof T]: Endpoint;\n}","import { HttpStatusCode } from \"axios\";\nimport { ScalexError } from \"./errors.interface\";\nimport { IUser } from \"./data-models/user/user.interfaces\";\n\nexport type ValuesOf<T extends any[]> = T[number];\nexport interface ApiResponse<T> {\n\tstatusCode: HttpStatusCode;\n\terror?: ScalexError;\n\tmessage: string;\n\tdata: T\n}\n\nexport enum TokenActions {\n\tLogin = 'login',\n\tDataAccess = 'data-access',\n\tSetPassword = 'set-password',\n\tRefresh='refresh',\n\tResetPassword='reset-password'\n}\n\nexport const TokenExpiry: {\n\t[key in TokenActions]: string\n} = {\n\t'set-password': '15m',\n\t'data-access': '3h',\n\trefresh: '1d',\n\t'reset-password': '15m',\n\t'login': '10m'\n};\n\nexport type DecodedJwtToken = { admin?: Partial<IUser>, action?: TokenActions }\nexport type ScalexAuthenticatedRequest = Request & DecodedJwtToken","import {IBaseModel} from \"../base.model\";\nimport {IAdminRoleMatrix} from \"./admin-role-matrix.interface\";\nimport {VerifiableEntity, VerificationApplicationStatus} from \"../../../customers\";\n\nexport interface IBusiness extends IBaseModel {\n    country: string;\n    registration: {\n        name: string;\n        number: string;\n        date: Date;\n        agreedToKyc: boolean;\n    }\n}\n\nexport interface IAddress extends IBaseModel {\n    country: string;\n    state: string;\n    city: string;\n    postalCode: string;\n    address: string;\n    proofOfAddress: string;\n}\n\nexport interface IPassword {\n    token: string;\n    hint: string;\n    isActive: boolean\n}\n\nexport enum UserStatus {\n    Active = 'active',\n    Suspended = 'suspended',\n    Deactivated = 'deactivated'\n}\n\nexport enum AuthStatus {\n    loggedInWithout2fa = 'logged-in-without-2fa',\n    loggedInWith2fa = 'logged-in-with-2fa',\n    loggedOutByExpiredToken = 'logged-out-by-expired-token',\n    loggedOutManually = 'logged-out-manually',\n    neverLoggedIn = 'never-logged-in'\n}\n\nexport interface IUser extends IBaseModel {\n    fullName: string;\n    invitedBy?: string;\n    dateOfBirth?: Date;\n    email: string;\n    status: UserStatus;\n    roleMatrix: string | IAdminRoleMatrix;\n    passwords?: Array<IPassword>;\n    authStatus?: AuthStatus;\n    authStatusLastChangedAt?: Date;\n    passWordResetToken?: string;\n    passWordResetTokenExpiry?: Date;\n    twoFactorAuthSecret?: string;\n    twoFactorAuthActive?: boolean;\n    agreedToTerms: boolean;\n    verifications: Array<{\n        entity: VerifiableEntity,\n        references: {\n            linkId: string;\n            jobId: string;\n        }\n        status: VerificationApplicationStatus\n    }>\n    address: IAddress;\n    businesses: Array<IBusiness>\n}\n\nexport interface IUserMethods {\n    updatePassword(\n        newPassword: string,\n        hint?: string\n    ): void;\n\n    updateAuthStatus(status: AuthStatus): void;\n\n    updatePasswordResetToken(token: string): void;\n}","export enum ActiveOrInactive {\n    active = 'active',\n    inactive = 'inactive'\n}\n\nexport enum IntegrationType {\n    SDK = 'sdk',\n    REST = 'rest'\n}\n\nexport enum PassOrFail {\n    passed = 'passed',\n    failed = 'failed'\n}","import { Endpoint, HttpMethods } from \"../../generic\";\n\nexport interface IRequestOtpToRegisterPayload {\n    email: string\n}\n\nexport interface IRequestOtpToRegisterResponse {\n    token: string;\n}\n\nexport const RequestOtpToRegisterEndpoint: Endpoint = {\n    method: HttpMethods.Post,\n    path: '/otps',\n    fullPath: '/customers-auth/otps'\n}\n\nexport interface IVerifyOtpAndCreatePasswordPayload {\n    otp: string;\n    password: string;\n    agreedToTerms: boolean;\n}\n\nexport interface IVerifyOtpAndCreatePasswordResponse {\n    token: string;\n}\n\nexport const VerifyOtpAndCreatePasswordEndpoint: Endpoint = {\n    method: HttpMethods.Post,\n    path: '/passwords',\n    fullPath: '/customers-auth/passwords'\n}\n\nexport interface IInitiate2faResponse {\n    qr: string;\n    secret: string;\n}\n\nexport const Initiate2faEndpoint: Endpoint = {\n    method: HttpMethods.Post,\n    path: '/2fa',\n    fullPath: '/customers-auth/2fa'\n}\n\nexport interface IVerify2faTokenPayload {\n    token: string;\n}\n\nexport const Verify2faEndpoint: Endpoint = {\n    method: HttpMethods.Patch,\n    path: '/2fa',\n    fullPath: '/customers-auth/2fa'\n}\n\n","import { Endpoint, HttpMethods } from \"../../generic\";\n\nexport interface IRequestPasswordResetPayload {\n    email: string\n}\n\nexport interface IRequestPasswordResetResponse {\n    token: string;\n}\n\nexport const RequestPasswordResetEndpoint: Endpoint = {\n    method: HttpMethods.Post,\n    path: '',\n    fullPath: '/customers-account-recovery'\n}\n\nexport interface IResetPasswordPayload {\n    otp: string;\n    password: string;\n    confirmPassword: string;\n}\n\nexport const ResetPasswordEndpoint: Endpoint = {\n    method: HttpMethods.Patch,\n    path: '',\n    fullPath: '/customers-account-recovery'\n}\n","import { Endpoint, HttpMethods, IUser } from \"../../generic\";\n\nexport interface IRequestOtpForLoginPayload {\n    email: string;\n}\n\nexport interface IVerifyOtpAndPasswordForLoginPayload {\n    otp: string;\n    password: string;\n}\n\nexport interface ILoginResponse {\n    token: string;\n}\n\nexport interface ITokenWithUserResponse {\n    token: string;\n    customer: Partial<IUser>\n}\n\nexport interface IVerify2faForLoginPayload {\n    token: string;\n}\n\nexport const RequestOtpForLoginEndpoint: Endpoint = {\n    method: HttpMethods.Post,\n    path: '/login',\n    fullPath: '/customers-auth/login'\n}\n\nexport const VerifyOtpAndPasswordForLoginEndpoint: Endpoint = {\n    method: HttpMethods.Patch,\n    path: '/login',\n    fullPath: '/customers-auth/login'\n}\n\nexport const Verify2faForLoginEndpoint: Endpoint = {\n    method: HttpMethods.Patch,\n    path: '/login/2fa',\n    fullPath: '/customers-auth/login/2fa'\n}","import {VerifiableEntity} from \"../models\";\nimport {Endpoint, HttpMethods} from \"../../generic\";\n\nexport interface IInitiateVerificationPayload {\n    entity: VerifiableEntity;\n}\n\nexport interface IInitiateVerificationResponse {\n    link: string;\n}\n\nexport const InitiateVerificationEndpoint: Endpoint = {\n    method: HttpMethods.Post,\n    path: '/customer-verification',\n    fullPath: '/customer-verification'\n}\n","import {IAddress, IBusiness, Endpoint, HttpMethods, IUser} from \"../../generic\";\n\nexport interface IUpdateProfilePayload {\n    firstName: string;\n    lastName: string;\n    dateOfBirth: Date;\n}\n\nexport interface ICreateBusinessPayload extends IBusiness {}\n\nexport interface IUpdateAddressPayload extends IAddress {}\n\nexport interface IUpdateAddressResponse {\n    customer: Partial<IUser>\n}\n\nexport interface ICreateBusinessResponse {\n    customer: Partial<IUser>\n}\nexport interface IUpdateProfileResponse {\n    customer: Partial<IUser>\n}\n\nexport const UpdateProfileEndpoint: Endpoint = {\n    method: HttpMethods.Patch,\n    path: '/customer-profile',\n    fullPath: '/customer-profile'\n}\n\nexport const CreateBusinessEndpoint: Endpoint = {\n    method: HttpMethods.Post,\n    path: '/businesses',\n    fullPath: '/businesses'\n}\n\nexport const UpdateAddressEndpoint: Endpoint = {\n    method: HttpMethods.Patch,\n    path: '/customer-address',\n    fullPath: '/customer-address'\n}\n\nexport const RetrieveProfileEndpoint: Endpoint = {\n    method: HttpMethods.Get,\n    path: '/customer-profile',\n    fullPath: '/customer-profile'\n}","import {ActiveOrInactive, IBaseModel, IntegrationType, PassOrFail} from \"../../generic\";\n\nexport enum VerifiableEntity {\n    governmentIssuedId = 'government-issued-id',\n    utilityBill = 'utility-bill',\n    businessRegistrationCertificate = 'business-registration-certificate',\n    phoneNumber = 'phone-number'\n}\n\nexport type VerificationResult = {\n    entity: VerifiableEntity;\n    status: PassOrFail\n}\n\nexport enum VerificationApplicantType {\n    individual = 'individual',\n    business = 'business'\n}\n\nexport enum VerificationAction {\n    initiateJobWithPartner = 'initiate-job-with-partner',\n    confirmJobStatusWithPartner = 'confirm-job-status-with-partner',\n    updateLocalUserRecords = 'update-local-user-records'\n}\n\nexport enum VerificationStepType {\n    apiCall = 'api-call',\n    webhook = 'webhook'\n}\n\nexport enum VerificationRequirementStatus {\n    one = 'one',\n    all = 'all'\n}\n\nexport enum VerificationApplicationStatus {\n    cold = 'cold',\n    inProgress = 'in-progress',\n    expired = 'expired',\n    filled = 'filled',\n    failed = 'failed',\n    successful = 'successful'\n}\n\nexport type VerificationFlow = {\n    entity: VerifiableEntity;\n    status: ActiveOrInactive;\n    applicantTypes: Array<VerificationApplicantType>\n    steps: Array<{\n        index: number;\n        action: VerificationAction;\n        type: VerificationStepType;\n        endpoint: string;\n        payloads: {\n            request: string;\n            response: string;\n        }\n    }>\n}\n\nexport interface IVerificationPartner<ApiKeyType = unknown> extends IBaseModel {\n    name: string;\n    integrationType: IntegrationType\n    apiKeys: string | ApiKeyType;\n    status: ActiveOrInactive;\n\n    baseUrl?: string;\n    docsUrl?: string;\n    webhookUrl?: string;\n\n    processFlows: Array<VerificationFlow>;\n}\n\nexport interface IVerificationApplication extends IBaseModel {\n    applicant: string;\n    applicantType: VerificationApplicantType;\n    applications: Array<{\n        entity: VerifiableEntity;\n        partner: {\n            id: string;\n            processFlowSnapshot: string;\n        };\n        status: VerificationApplicationStatus;\n        steps: {\n            index: number;\n            request: string;\n            response: string;\n            status: VerificationApplicationStatus\n        }\n    }>\n}","import { ScalexSuccessResponse, callApi, myInterceptor, setBearerToken } from \"../../../functions\";\nimport {\n    IInitiate2faResponse,\n    IRequestOtpToRegisterPayload,\n    IRequestOtpToRegisterResponse,\n    IRequestPasswordResetPayload,\n    IRequestPasswordResetResponse,\n    IResetPasswordPayload,\n    IVerify2faTokenPayload,\n    IVerifyOtpAndCreatePasswordPayload,\n    IVerifyOtpAndCreatePasswordResponse,\n    Initiate2faEndpoint,\n    RequestOtpToRegisterEndpoint,\n    RequestPasswordResetEndpoint,\n    ResetPasswordEndpoint,\n    Verify2faEndpoint,\n    VerifyOtpAndCreatePasswordEndpoint,\n    IRequestOtpForLoginPayload,\n    ILoginResponse,\n    RequestOtpForLoginEndpoint,\n    IVerifyOtpAndPasswordForLoginPayload,\n    VerifyOtpAndPasswordForLoginEndpoint,\n    IVerify2faForLoginPayload,\n    Verify2faForLoginEndpoint,\n    ITokenWithUserResponse,\n    IInitiateVerificationPayload,\n    IInitiateVerificationResponse,\n    InitiateVerificationEndpoint,\n    UpdateProfileEndpoint,\n    IUpdateProfilePayload,\n    IUpdateProfileResponse,\n    RetrieveProfileEndpoint,\n    IUpdateAddressPayload,\n    IUpdateAddressResponse,\n    UpdateAddressEndpoint,\n    ICreateBusinessPayload, ICreateBusinessResponse\n} from \"../../../types\";\n\nexport class ScalexCustomersSdk {\n    constructor( protected apiUrl: string ) {}\n\n    async requestOtpToRegister(payload: IRequestOtpToRegisterPayload)\n    : Promise<ScalexSuccessResponse<IRequestOtpToRegisterResponse>> {\n        return callApi<IRequestOtpToRegisterPayload, IRequestOtpToRegisterResponse>({\n            serviceUri: this.apiUrl,\n            endpoint: RequestOtpToRegisterEndpoint,\n            body: payload\n        })\n    }\n\n    async verifyOtpAndCreatePassword( payload: IVerifyOtpAndCreatePasswordPayload, authToken: string )\n    : Promise<ScalexSuccessResponse<IVerifyOtpAndCreatePasswordResponse>> {\n        return callApi<IVerifyOtpAndCreatePasswordPayload, IVerifyOtpAndCreatePasswordResponse>({\n            serviceUri: this.apiUrl,\n            endpoint: VerifyOtpAndCreatePasswordEndpoint,\n            body: payload,\n            headers: {\n                ...setBearerToken(authToken)\n            }\n        })\n    }\n\n    async initiate2faRegistration( authToken: string )\n    : Promise<ScalexSuccessResponse<IInitiate2faResponse>> {\n        return callApi<null, IInitiate2faResponse>({\n            serviceUri: this.apiUrl,\n            endpoint: Initiate2faEndpoint,\n            headers: {\n                ...setBearerToken(authToken)\n            }\n        })\n    }\n\n    async verify2faToken( payload: IVerify2faTokenPayload, authToken: string )\n    : Promise<ScalexSuccessResponse<ITokenWithUserResponse>> {\n        return callApi<IVerify2faTokenPayload, ITokenWithUserResponse>({\n            serviceUri: this.apiUrl,\n            endpoint: Verify2faEndpoint,\n            body: payload,\n            headers: {\n                ...setBearerToken(authToken)\n            }\n        })\n    }\n\n    async requestPasswordReset( payload: IRequestPasswordResetPayload )\n    : Promise<ScalexSuccessResponse<IRequestPasswordResetResponse>> {\n        return callApi<IRequestPasswordResetPayload, IRequestPasswordResetResponse>({\n            serviceUri: this.apiUrl,\n            endpoint: RequestPasswordResetEndpoint,\n            body: payload\n        })\n    }\n\n    async resetPassword( payload: IResetPasswordPayload, authToken: string )\n    : Promise<ScalexSuccessResponse<null>> {\n        return callApi<IResetPasswordPayload, null>({\n            serviceUri: this.apiUrl,\n            endpoint: ResetPasswordEndpoint,\n            body: payload,\n            headers: {\n                ...setBearerToken(authToken)\n            }\n        })\n    }\n\n    async requestOtpToLogin( payload: IRequestOtpForLoginPayload )\n        : Promise<ScalexSuccessResponse<ILoginResponse>> {\n        return callApi<IRequestOtpForLoginPayload, ILoginResponse>({\n            serviceUri: this.apiUrl,\n            endpoint: RequestOtpForLoginEndpoint,\n            body: payload,\n        })\n    }\n\n    async verifyOtpAndPasswordForLogin( payload: IVerifyOtpAndPasswordForLoginPayload, authToken: string )\n        : Promise<ScalexSuccessResponse<ITokenWithUserResponse>> {\n        return callApi<IVerifyOtpAndPasswordForLoginPayload, ITokenWithUserResponse>({\n            serviceUri: this.apiUrl,\n            endpoint: VerifyOtpAndPasswordForLoginEndpoint,\n            body: payload,\n            headers: {\n                ...setBearerToken(authToken)\n            }\n        })\n    }\n\n    async verify2faForLogin( payload: IVerify2faForLoginPayload, authToken: string )\n        : Promise<ScalexSuccessResponse<ILoginResponse>> {\n        return callApi<IVerify2faForLoginPayload, ILoginResponse>({\n            serviceUri: this.apiUrl,\n            endpoint: Verify2faForLoginEndpoint,\n            body: payload,\n            headers: {\n                ...setBearerToken(authToken)\n            }\n        })\n    }\n\n    async updateProfile( payload: IUpdateProfilePayload, authToken: string )\n        : Promise<ScalexSuccessResponse<IUpdateProfileResponse>> {\n        return callApi<IUpdateProfilePayload, IUpdateProfileResponse>({\n            serviceUri: this.apiUrl,\n            endpoint: UpdateProfileEndpoint,\n            body: payload,\n            headers: {\n                ...setBearerToken(authToken)\n            }\n        })\n    }\n\n    async retrieveProfile( authToken: string )\n        : Promise<ScalexSuccessResponse<IUpdateProfileResponse>> {\n        return callApi<null, IUpdateProfileResponse>({\n            serviceUri: this.apiUrl,\n            endpoint: RetrieveProfileEndpoint,\n            headers: {\n                ...setBearerToken(authToken)\n            }\n        })\n    }\n\n    async initiateVerification( payload: IInitiateVerificationPayload, authToken: string )\n        : Promise<ScalexSuccessResponse<IInitiateVerificationResponse>> {\n        return callApi<IInitiateVerificationPayload, IInitiateVerificationResponse>({\n            serviceUri: this.apiUrl,\n            endpoint: InitiateVerificationEndpoint,\n            body: payload,\n            headers: {\n                ...setBearerToken(authToken)\n            }\n        })\n    }\n\n    async updateAddress( payload: IUpdateAddressPayload, authToken: string )\n        : Promise<ScalexSuccessResponse<IUpdateAddressResponse>> {\n        return callApi<IUpdateAddressPayload, IUpdateAddressResponse>({\n            serviceUri: this.apiUrl,\n            endpoint: UpdateAddressEndpoint,\n            body: payload,\n            headers: {\n                ...setBearerToken(authToken)\n            }\n        })\n    }\n\n    async createBusiness( payload: ICreateBusinessPayload, authToken: string )\n        : Promise<ScalexSuccessResponse<ICreateBusinessResponse>> {\n        return callApi<ICreateBusinessPayload, ICreateBusinessResponse>({\n            serviceUri: this.apiUrl,\n            endpoint: UpdateAddressEndpoint,\n            body: payload,\n            headers: {\n                ...setBearerToken(authToken)\n            }\n        })\n    }\n\n    async check401Error():Promise<any>  {\n        return myInterceptor\n    }\n}","import {ScalexCustomersSdk} from \"./modules\";\n\nexport enum ScalexInternalEnvironments {\n    local = 'local',\n    dev = 'dev',\n    prod = 'prod'\n};\n\nexport enum ScalexInternalApiVersions {\n    v1 = '/v1',\n}\n\nconst InternalEnvironmentUrls: {\n    [key in ScalexInternalEnvironments]: string;\n} = {\n    local: 'http://localhost:8500',\n    dev: 'https://scalex-api-gateway-dev.up.railway.app',\n    prod: 'https://scalex-api.up.railway.app'\n}\n\nexport class ScalexInternalAPI {\n    private readonly apiUrl: string;\n    customers: ScalexCustomersSdk;\n\n\n    constructor(\n        environment: ScalexInternalEnvironments = ScalexInternalEnvironments.dev,\n        version: ScalexInternalApiVersions = ScalexInternalApiVersions.v1\n    ) {\n        this.apiUrl = InternalEnvironmentUrls[environment] + version;\n        this.customers = new ScalexCustomersSdk(this.apiUrl)\n    }\n}","export const socketChannelsAndEvents = {\n    verification: {\n        channelName: 'verification',\n        events: {\n            completedVerification: 'completed-verification'\n        }\n    }\n}\n"],"mappings":"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","names":["HttpMethods","TokenActions","UserStatus","AuthStatus","ActiveOrInactive","IntegrationType","PassOrFail","VerifiableEntity","VerificationApplicantType","VerificationAction","VerificationStepType","VerificationRequirementStatus","VerificationApplicationStatus","ScalexInternalEnvironments","ScalexInternalApiVersions"]}